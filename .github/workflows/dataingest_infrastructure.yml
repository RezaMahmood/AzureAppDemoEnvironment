name: DataIngest CI - Infrastructure

on:
  push:
    branches: [main]
    paths:
      - "infrastructure/**"
  pull_request:
    branches: [main]
    paths:
      - "infrastructure/**"

  workflow_dispatch:

env:
  TF_DIRECTORY: "./infrastructure"
  TF_STATESTOR_NAME: "azappdemostate"
  TF_STATESTOR_GROUP: "AzureAppDemo-tfstate"
  TF_STATESTOR_CONTAINER: "tfstate"
  ARM_CLIENT_ID: "${{ secrets.AZURE_TF_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_TF_CLIENT_SECRET }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TF_TENANT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_TF_SUBSCRIPTION_ID }}"
  APPDEMOCONFIG_KEYVAULT: "AzureAppDemoConfig"

jobs:
  build:
    name: Set up infrastructure for DataIngest applications
    runs-on: ubuntu-latest

    steps:
      - name: Install terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt

      - name: Checkout terraform files
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve TF variables
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            storage_account_key=$(az storage account keys list -g ${{ env.TF_STATESTOR_GROUP }} --account-name ${{ env.TF_STATESTOR_NAME }} --query '[0].value' -o tsv)          
            export ARM_ACCESS_KEY=$storage_account_key
            jumpboxusername=$(az keyvault secret show --name "jumpboxusername" --vault-name ${{ env.APPDEMOCONFIG_KEYVAULT }} --query 'value' -o tsv) 
            jumpboxpassword=$(az keyvault secret show --name "jumpboxpassword" --vault-name ${{ env.APPDEMOCONFIG_KEYVAULT }} --query 'value' -o tsv) 
            export TF_VAR_jumpboxusername=$jumpboxusername
            export TF_VAR_jumpboxpassword=$jumpboxpassword

      - name: Terraform Init
        run: |
          cd ${{ env.TF_DIRECTORY }}
          terraform init

      - name: Terraform Validate
        run: |
          cd ${{ env.TF_DIRECTORY }}
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - run: echo ${{ steps.plan.output.stdout }}
      - run: echo ${{ steps.plan.output.stderr }}
      - run: echo ${{ steps.plan.output.exitcode }}

      - name: Terraform Apply
        run: |
          cd ${{ env.TF_DIRECTORY }}
          terraform apply -no-color -auto-approve
